Lab 12 - Demo4/Lab5
      EmpManger -> slice 
            add(Emp)
            delete(int empno)
            print
            
Lab 11 - Demo3/Lab4
              Create a struct Emp , 
                     empno int, ename string ,salary int
              Write two function with Emp as receiver 
                     incrSalary 
                     print
                     
Lab 10 - Demo2/Lab3
       package main
       import "fmt"
       type Point struct {
              x int
              y int
       }
       func incr(point *Point){
              point.x +=10
              point.y +=10
              fmt.Println("in incr" , point)
       }
       func (point *Point) incr2(x, y int){
              point.x +=x
              point.y +=y
              fmt.Println("in incr222" , point)
       }
       func main(){
              v1 := Point{10,20}
              fmt.Println(v1)
              v1 = Point{y:10,x:20}
              fmt.Println(v1)
              incr(&v1)
              fmt.Println(v1)
              v1.incr2(2,6)
              fmt.Println(v1)

       }

Lab 9 - Create slice of 5 items, add dynamically, sort and print. (check impact of cap )
Lab 8 - Demo2/Lab2 
       package main
       import (
              "fmt"

       )

       func main(){
              //primes := []int{20, 31, 55, 77, 1, 13}
              //fmt.Println(primes)
              //var s []int = primes[1:4]
              s := make([]int, 10) 
              s[0] = 200 
              fmt.Println(s)

              fmt.Println(s  , ",  len = " , len(s) , ", cap = " , cap(s))
              //s[3] = 1000
              s = append(s,4)
              fmt.Println(s  , ",  len = " , len(s) , ", cap = " , cap(s))
              s = append(s,500)
              fmt.Println(s  , ",  len = " , len(s) , ", cap = " , cap(s))
              s = append(s,6000)
              fmt.Println(s  , ",  len = " , len(s) , ", cap = " , cap(s))
              s = append(s,700)
              fmt.Println(s  , ",  len = " , len(s) , ", cap = " , cap(s))
              //fmt.Println(primes)

       }

Lab7 - Slice (Demo2/Lab1.go)
       package main
       import (
              "fmt"
       )

       func main(){
              primes := []int{20, 31, 55, 77, 1, 13}
              fmt.Println(primes)
              //sort.Sort(sort.IntSlice(primes))
              //fmt.Println(primes)
              var s []int = primes[1:4]
              fmt.Println(s)
              s[0] = 1000
              fmt.Println(s)
              s = primes[:3]
              fmt.Println(s)
              s = primes[3:5]
              fmt.Println(s)
       }


Lab6 - 
       package main
       import "fmt"

       func main(){
              fmt.Println("Enter your name")
              str := "aa"
              x, err:= fmt.Scanln(&str)
              fmt.Println("x = " , x , ", Error = ", err)
              fmt.Println("Hello, " , str);
       }

      Accept a number from user and print Fibonacci series till that number
      Accept 5 strings from user and sort and print the same


Lab5 - Multiple files
       Create Helper.go 
              package main
              import "fmt"
              func add(x, y int) int {
                     fmt.Println("Add invoked with ", x, " and ", y)
                     //fmt.Println(" Sum = ", (x + y))
                     return x + y
              }
        Create Lab5.go to invoke add method
        cmd>go run Lab5.go -> error
        cmd>go run Lab5.go Helper.go
        
Lab4 - package main
       import (
              "fmt"
            "os"
              )
       func main(){
              fmt.Println("Args = " , os.Args)
       }
       
       Modify main method to print length of array
       Write a for loop to print String and length from array
       
Lab3 - Write a function for swapping two string values 
       Write a function to accept String and return length of String
Lab2 - 
        package main

        import "fmt"

        func main() {
                fmt.Println("Invoke Function")
                hello()
                sum := add(10, 100)
                fmt.Println("Sum =  ", sum)
                sum = add(110, 200)
                fmt.Println("Sum =  ", sum)
                add, sub := calc(110, 200)
                fmt.Println("add =  ", add, " , Sub = " , sub)

        }
        func hello() {
                fmt.Println("Hello invoked ")
        }
        func add(x, y int) int {
                fmt.Println("Add invoked with ", x, " and ", y)
                //fmt.Println(" Sum = ", (x + y))
                return x + y
        }
        func calc(x, y int) (int, int) {
                fmt.Println("Calc invoked with ", x, " and ", y)
                return x + y, x - y
        }


Lab1 - Create Lab1.go 
        package demo
        func main(){
          fmt.Println("Hello World !!")
        }
        cmd>go build Lab1.go 
          Obseve exe file
        cmd>go run Lab1.go
        cmd>
