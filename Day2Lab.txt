Lab 10 - Dynamodb
           https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/dynamo-example-list-tables.html
           
Lab 9 - Db connection (in demo3 folder)
           create module
           Create Lab1.go
                      package main
                      import (
                                 "database/sql"
                                 "time"
                                 "fmt"
                                 _ "github.com/go-sql-driver/mysql"
                      )

                      func main(){
                      db, err := sql.Open("mysql", "admin:MyPassword@database-1.cxmg6nnxkwnv.us-east-1.rds.amazonaws.com/mydb")
                      if err != nil {
                                 panic(err)
                      }
                      fmt.Println("Connection Established " , db )
                      // See "Important settings" section.
                      db.SetConnMaxLifetime(time.Minute * 3)
                      db.SetMaxOpenConns(10)
                      db.SetMaxIdleConns(10)
                      rows, err1 := db.Query("insert into emp values (11,'AAA',11000)")

                      }
Lab8 - Connect to https://reqres.in/api/users/2 download json, create object and just show email address for user 2
           http . get
           encoding/json -> unmarshal
           package main
           import (
                      "fmt"	
                      "net/http"	
                      "io/ioutil"
                      "encoding/json"
           )
           type UserInfo struct {
                      Data struct {
                                 ID        int    `json:"id"`
                                 Email     string `json:"email"`
                                 FirstName string `json:"first_name"`
                                 LastName  string `json:"last_name"`
                                 Avatar    string `json:"avatar"`
                      } `json:"data"`
                      Support struct {
                                 URL  string `json:"url"`
                                 Text string `json:"text"`
                      } `json:"support"`
           }
           func main() { 
                      url :="https://reqres.in/api/users/2"    
                      var client = http.Client{} 
                      resp, err := client.Get(url); 
                      if err != nil {	
                                 fmt.Println("Error " );
                      } else {
                                 fmt.Println("resp" , resp);	
                                 data, _ := ioutil.ReadAll(resp.Body)
                                 fmt.Println("\n\n\nbody " ,string(data)) 
                                 obj :=UserInfo{}
                                 json.Unmarshal(data, &obj)
                                 fmt.Println("Object Details - email " + obj.Data.Email)
                      }
           }


Lab7 - external module/lib download
      create Lab1.go
            package main

            import "fmt"
            import "github.com/magiconair/properties"

            func main() {	
                  fmt.Println("Hello, World")	

                  p := properties.MustLoadFile("sim.properties",
                                     properties.UTF8)

                  if port, ok := p.Get("port");	 ok {    
                              fmt.Println("Found Port : ", port)
                  }
            }
      cmd>go mod init demo2
            // check -> set go , check gopath folder (empty)
      cmd>go mod tidy
            // check -> set go , check gopath folder (downloaded )
      cmd>go run Lab1.go
            observe error
      create sim.properties (with port prop)
      
Lab6 - http Server
      package main
      import (
            "fmt"
            "net/http"
      )
      func main(){

            http.HandleFunc("/",
             func(w http.ResponseWriter, r *http.Request) {
                  fmt.Fprintf(w, "<h1>Hello World !!</h1>")
            })
            http.ListenAndServe(":8080", nil)
      }
Lab5 - interface
      package main
      import (
            "fmt"
            "strconv"
      )
      type tostr interface {
            Convert() string 
      }

      type Emp struct {
            empno int
            ename string
      }
      func (e Emp) Convert() string {
           str :="Emp Details[Empno = "+ strconv.Itoa(e.empno)+ " , Name = " + e.ename +"]" ;
           return str
      }
      func main(){
            var a tostr;
            e:= Emp{10,"aaa"}
            fmt.Println(e)
            a = e
            fmt.Println(a.Convert())
      }

Lab4 - Panic  - Recover
      package main
      import "fmt"
      func main() {
          f()
            defer func() {
              if r := recover(); r != nil {
                  fmt.Println("Recovered in f", r)
              }
          }()
          fmt.Println("Returned normally from f.")
      }
      func f() {

            fmt.Println("Calling g.")
            g(1)
          fmt.Println("Returned normally from g.")


      }
      func g(i int) {
          if i > 3 {
              fmt.Println("Panicking!")
              panic("Problem")
          }
          defer fmt.Println("Defer in g", i)
          fmt.Println("Printing in g", i)
          g(i + 1)
      }


Lab3 - writer a for loop of 5 iterations and write a defer line inside
      package main
      import "fmt"
      func main(){
            test1()
            test2()
      }
      func test1(){
            i := 10;
            defer fmt.Println("world" , i)
            i = 20;
            fmt.Println("hello" , i)
            }
      func test2(){
            fmt.Println("counting")
            for i := 0; i < 10; i++ {
                  defer fmt.Println(i)
            }
            fmt.Println("done")

      }
Lab2 - defer
      package main
      import "fmt"
      func main(){
            defer fmt.Println("hello")
            fmt.Println("world")
            test()
      }

      func test(){
            defer fmt.Println("test line1")
            fmt.Println("test line2")
      }
Lab1 - closures
      package main
      import "fmt"
      func adder() func(int) int {
        sum := 0
        fmt.Println("Adder invoked and current sum = ", sum)
        return func(x int) int {
          fmt.Println("in return function and current value of sum = ", sum)
          sum += x
          return sum
        }
      }
