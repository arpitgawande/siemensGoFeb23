Lab6 - Simple demo for  https://github.com/gorilla/mux -> get/post 
Lab5 - ProjectWithLib -> replace EmpManager to connect to MySQL
        database-1.cxmg6nnxkwnv.us-east-1.rds.amazonaws.com
        database-1
        admin
        MyPassword
        
        func connect() *sql.DB {
                db, err := sql.Open("mysql", "admin:MyPassword@tcp(db1.cgx7wslwcmx7.us-east-1.rds.amazonaws.com:3306)/tmp")
                if err != nil {
                        panic(err)
                }
                return db
           }
        func Insert(dept Dept) {
                db := connect()
                defer db.Close()
                sql1 :=  "insert into dept values (" + strconv.Itoa(dept.Deptno) + ",'" + dept.Dname+ "','"+dept.Loc+"')"
                fmt.Println("sql", sql1)
                result, err := db.Exec(sql1)
                if err != nil {
                        fmt.Println("Error " , err)
                }
                result.RowsAffected()
        }
        func List() []Dept {
                db := connect()
                defer db.Close()
                res, err := db.Query("SELECT * FROM dept")
                defer res.Close()
                if err != nil {
                        panic(err)
                }
                deptslice:=make([]Dept,0)
                for res.Next() {
                        dept := Dept{}
                        res.Scan(&dept.Deptno,&dept.Dname, &dept.Loc)
                        deptslice= append(deptslice,dept)	
                }
                return deptslice
}




Lab4  - ProjectWithLib -  https://go.dev/doc/tutorial/create-module
        cmd\ProjectWithLib>mkdir dblib
        cmd\ProjectWithLib>cd dblib
        cmd\ProjectWithLib\dblib>go mod init siemensdemo/dblib
        create dblib\EmpManager.go
                package mylib

                import (
                        "fmt"
                )
                type Emp struct {
                        Empno  int    `json:"empno"`
                        Ename  string `json:"ename"`
                        Salary int    `json:"salary"`
                }

                func (emp Emp) print() {
                        fmt.Println("Print EmpNo = ", emp.Empno, " , Ename =", emp.Ename+", Salary = ", emp.Salary)
                }

                type EmpManager struct {
                        Emparr []Emp
                }

                func (empmgr *EmpManager) Add(e1 Emp) {
                        empmgr.emparr = append(empmgr.emparr, e1)
                }
        
        cmd\ProjectWithLib\dblib>go mod tidy
        cmd\ProjectWithLib>md clientweb
        cmd\ProjectWithLib>cd clientweb
        cmd\ProjectWithLib\clientweb> go mod init siemensdemo/clientweb
        create clientweb\main.go
        
        
        cmd\ProjectWithLib\clientweb>go mod edit -replace siemensdemo/dblib=../dblib
        check errors and rectify
        
Lab3 - 
        Create Lab1.go
       package main
        import(
                "fmt"
                "encoding/json"
                "strconv"
                "net/http"
                "log"
        )
        func main(){
                empmgr:=EmpManager{}
                for i:=1;i<10;i++{
                        emp := Emp{i,"Nameof"+strconv.Itoa(i),i*1000}
                        empmgr.add(emp)
                }

                http.HandleFunc("/emps", 
                func(w http.ResponseWriter, r *http.Request) {
                        fmt.Println(r.Method)
                        if (r.Method == "GET"){
                                barr,_:=json.Marshal(empmgr.emparr)
                                fmt.Fprintln(w, string(barr))
                        }
                        if (r.Method == "POST"){
                                fmt.Fprintln(w, "POST Request invoked ")
                                fmt.println(w)
                                // content for body text in request
                                
                        }
        })

        log.Fatal(http.ListenAndServe(":8080", nil))

        }
        
        EmpManager.go
        package main
        import(
          "fmt"
        )
        type Emp struct {
          Empno  int 
          Ename  string 
          Salary int 
        }
        func (emp Emp) print(){
          fmt.Println("Print EmpNo = " , emp.Empno , " , Ename =" , emp.Ename + ", Salary = " , emp.Salary)
        }
        type EmpManager struct {
          emparr []Emp 
        }
        func (empmgr *EmpManager) add(e1 Emp){
          empmgr.emparr = append(empmgr.emparr, e1)
        }


      REST API -> 
                  Slice of Emp (EmpManager)
                  post -> add Emp to slice
                  get -> return Emps as JSON

Lab2 - https://pkg.go.dev/testing#hdr-Benchmarks
        go test Lab1_test.go Lab1.go -bench=. -v -test.count=100 -test.benchtime=1s

Lab1 - 
  Write Lab1.go
    package main
    import "fmt"
    func add(a,b int) int {
      fmt.Println("Add invoked with " , a, ", ", b)
      return a+a
    }
    func main(){
      fmt.Println("Main " , add(10,40))
    }
    
  Write Lab1_test.go
    package main

    import "testing"

    func TestAdd2(t *testing.T) {
        got := add(10,100)
        if got != 110 {
            t.Errorf("Add(10,100) = %d; want 110", got)
        }
    }
  cmd>go test Lab1_test.go Lab1.go
  cmd>go test Lab1_test.go Lab1.go -v
  cmd>go test Lab1_test.go Lab1.go -cover
  cmd>go test Lab1_test.go Lab1.go -v -coverprofile tmp.txt
  cmd>go tool cover -html=tmp.txt -o tmp.html
  
  write divide method to accept two strings, convert to int and return divide
    two exceptions -> AtoI giving error or zero divide
  Write three test cases
    1. passing a string args with invalid number should give error
    2. pass second arg zero should return error
    3. correct exe
  
  
  
