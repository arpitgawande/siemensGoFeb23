Lab3 - Emp -> empno, ename, salary
        package main
        import(
          "fmt"
        )
        type Emp struct {
          Empno  int 
          Ename  string 
          Salary int 
        }
        func (emp Emp) print(){
          fmt.Println("Print EmpNo = " , emp.Empno , " , Ename =" , emp.Ename + ", Salary = " , emp.Salary)
        }
        type EmpManager struct {
          emparr []Emp 
        }
        func (empmgr *EmpManager) add(e1 Emp){
          empmgr.emparr = append(empmgr.emparr, e1)
        }


      REST API -> 
                  Slice of Emp (EmpManager)
                  post -> add Emp to slice
                  get -> return Emps as JSON

Lab2 - https://pkg.go.dev/testing#hdr-Benchmarks
Lab1 - 
  Write Lab1.go
    package main
    import "fmt"
    func add(a,b int) int {
      fmt.Println("Add invoked with " , a, ", ", b)
      return a+a
    }
    func main(){
      fmt.Println("Main " , add(10,40))
    }
    
  Write Lab1_test.go
    package main

    import "testing"

    func TestAdd2(t *testing.T) {
        got := add(10,100)
        if got != 110 {
            t.Errorf("Add(10,100) = %d; want 110", got)
        }
    }
  cmd>go test Lab1_test.go Lab1.go
  cmd>go test Lab1_test.go Lab1.go -v
  cmd>go test Lab1_test.go Lab1.go -cover
  cmd>go test Lab1_test.go Lab1.go -v -coverprofile tmp.txt
  cmd>go tool cover -html=tmp.txt -o tmp.html
  
  write divide method to accept two strings, convert to int and return divide
    two exceptions -> AtoI giving error or zero divide
  Write three test cases
    1. passing a string args with invalid number should give error
    2. pass second arg zero should return error
    3. correct exe
  
  
  
