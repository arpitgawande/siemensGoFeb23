Lab 6 - 
       Http Client       - https://pkg.go.dev/net/http
              Write code to invoke  https://3syx10p8k0.execute-api.us-east-1.amazonaws.com/default/Demo2
       Invoke your lambda function
              https://docs.aws.amazon.com/sdk-for-go/api/service/lambda/#example_Lambda_Invoke_shared00
Lab5 - 
       package main
 
       import (
               "fmt"
               "github.com/aws/aws-lambda-go/lambda"
       )

       type MyEvent struct {
               Name string `json:"username"`
               Age int     `json:"userage"`
       }

       type MyResponse struct {
               Message string `json:"answer:"`
       }

       func HandleLambdaEvent(event MyEvent) (MyResponse, error) {
               return MyResponse{Message: fmt.Sprintf("%s is %d years old!", event.Name, event.Age)}, nil
       }

       func main() {
               lambda.Start(HandleLambdaEvent)
       }
       Configure lambda, api gateway
       
       Input JSON
              {
              "empno" : "10",
              "ename":"Vaishali",
              "salary":111
              }


Lab4 - Modify API Gateway 
      create name model
       models -> create -> namemodel
              {
                "$schema" : "http://json-schema.org/draft-04/schema#",
                "title" : "name",
                "type" : "object",
                "properties" : {
                  "username" : { "type" : "string" }
                }
              }
      Modify Method Request -> request body->
              content type -App/json -> namemodel
       Modify integration request ->
                     Mapping Template -> add for app/json
                            #set($inputRoot = $input.path('$'))
                            {
                              "name" : "$input.path('username')"
                            }
        Test -> from Console
                from Postman
        
Lab3 - Customize API Gateway
       Select lambda function and create API Gateway trigger - Test -> check error {"message": "Internal server error"}
       Edit API gateway for current lambda
              delete current method - any
              Create new method -> post 
                         Integration type   Lambda Function 
                         Lambda region - 
                         Lambda Function - Demo1
               Edit Method Request
                     Request Body ->Add Model 
                                   Application/json -> Empty
               Modify Integration Request 
                     Mapping Template 
                            add
                                   application/json
                                          {
                                              "name":"FixedName"
                                          }
                Save -Test 
                if successful -> Deploy API 
                                   give any stage name
                        copy url -> test from postman -> Forbiddon
                        copy url for post method -> finish testing       
Lab2 - cmd>go.exe install github.com/aws/aws-lambda-go/cmd/build-lambda-zip@latest
       in Demo1\main.go
            package main

            import (
                    "fmt"
                    "context"
                    "github.com/aws/aws-lambda-go/lambda"
            )

            type MyEvent struct {
                    Name string `json:"name"`
            }

            func HandleRequest(ctx context.Context, name MyEvent) (string, error) {
                    return fmt.Sprintf("Hello %s!", name.Name ), nil
            }

            func main() {
                    lambda.Start(HandleRequest)
            }
      cmd\Demo1>go mod init demo
      cmd\Demo1>go mod tidy
      cmd\Demo1>set GOOS=linux
      cmd\Demo1>set GOARCH=amd64
      cmd\Demo1>set CGO_ENABLED=0
      cmd\Demo1>go build -o main main.go
      cmd\Demo1>%USERPROFILE%\Go\bin\build-lambda-zip.exe -o main.zip main
    
      AWS Console -> create a lambda function - for go -> upload main -> test function locally
Lab1 - create lambda function using node, with trigger as api gateway
